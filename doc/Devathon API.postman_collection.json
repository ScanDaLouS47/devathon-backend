{
	"info": {
		"_postman_id": "bbfbf0a6-5ad8-460e-ac6b-a548831c90c3",
		"name": "Devathon API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34594282",
		"_collection_link": "https://galacticos-team-2.postman.co/workspace/Devaton~3537e21d-ffa0-4f29-8cb8-88d4ba279b3b/collection/34594282-bbfbf0a6-5ad8-460e-ac6b-a548831c90c3?action=share&source=collection_link&creator=34594282"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "Getting the user list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}",
							"host": [
								"{{base_url}}"
							]
						},
						"description": "  \n- **Description**: Retrieve a list of all users.\n- **Response**: JSON object containing users data.\n\n### Response Body\n\nThe response is a JSON object with the following schema:\n\n``` json\n{\n    \"ok\": \"boolean\",\n    \"data\": [\n        {\n            \"id\": \"number\",\n            \"email\": \"string\",\n            \"role\": \"string\",\n            \"name\": \"string\",\n            \"lName\": \"string\",\n            \"phone\": \"string\"\n        },{\n            \"id\": \"number\",\n            \"email\": \"string\",\n            \"role\": \"string\",\n            \"name\": \"string\",\n            \"lName\": \"string\",\n            \"phone\": \"string\"\n        },{\n            \"id\": \"number\",\n            \"email\": \"string\",\n            \"role\": \"string\",\n            \"name\": \"string\",\n            \"lName\": \"string\",\n            \"phone\": \"string\"\n        },....\n    ],\n    \"msg\": \"string\"\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "Create an user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();",
									"let userId = response.data.id;",
									"",
									"pm.collectionVariables.set('userId', userId);",
									"",
									"pm.test('status 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('ok true', function () {",
									"    pm.expect(response.ok).to.eql(true);",
									"});",
									"",
									"pm.test('msg validation', function () {",
									"    pm.expect(response.msg).to.eql(\"Create user successfull\");",
									"});",
									"",
									"pm.test(\"Response time is within an acceptable range\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.lessThan(1000);",
									"});",
									"",
									"pm.test(\"Data object has the correct structure\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.data).to.be.an('object');",
									"    pm.expect(responseData.data.id).to.exist.and.to.be.a('number');",
									"    pm.expect(responseData.data.email).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.data.role).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.data.name).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.data.lName).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.data.phone).to.exist.and.to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.data.email).to.be.a('string').and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email should be in a valid format\");",
									"});",
									"",
									"",
									"pm.test(\"Phone number is in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data.phone).to.match(/^\\d{10}$/);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let body = {",
									"    \"name\": \"Josepingp\",",
									"    \"lName\": \"El guapeton\",",
									"    \"email\": \"examplemail@mail.com\",",
									"    \"phone\": \"658780643\",",
									"    \"sup_id\": \"oveuhleacotem\"",
									"};",
									"",
									"pm.collectionVariables.set('create_body', JSON.stringify(body));",
									"pm.collectionVariables.set('sup_id', body.sup_id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Josepingp\",\n    \"lName\": \"El guapeton\",\n    \"email\": \"examplemail@mail.com\",\n    \"phone\": \"658780643\",\n    \"sup_id\": \"oveuhleacotem\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}",
							"host": [
								"{{base_url}}"
							]
						},
						"description": "- **Description**: Create a new user.\n    \n- **Request Headers**:\n    - `Content-Type: application/json`\n        \n- **Request Body**:\n    \n\n``` json\n{\n    \"name\": \"First\",\n    \"lName\": \"Last\",\n    \"email\": \"user@example.com\",\n    \"phone\": \"1234567890\",\n    \"sup_id\": \"supervisor_id\"\n}\n\n ```\n\n- **Response**: JSON object with the new user data.\n    \n\n#### Example Response\n\n``` json\n{\n    \"ok\": true,\n    \"data\": {\n        \"id\": 2,\n        \"email\": \"user@example.com\",\n        \"role\": \"user\",\n        \"name\": \"First\",\n        \"lName\": \"Last\",\n        \"phone\": \"1234567890\"\n    },\n    \"msg\": \"User created successfully\"\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "show user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is within an acceptable range\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Validate the response schema for the presence of required fields\", function () {",
									"    const responseData = pm.response.json().data;",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.exist;",
									"    pm.expect(responseData.email).to.exist;",
									"    pm.expect(responseData.role).to.exist;",
									"    pm.expect(responseData.name).to.exist;",
									"    pm.expect(responseData.lName).to.exist;",
									"    pm.expect(responseData.phone).to.exist;",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{sup_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{sup_id}}"
							]
						},
						"description": "- **Description**: Retrieve user information by sup_id.\n    \n- **Response**: JSON object with user details.\n    \n\n#### Example URL\n\n`GET http://127.0.0.1:8000/api/v1/user/oveuhleacotem`\n\n#### Response Body\n\n``` json\n{\n    \"ok\": true,\n    \"data\": {\n        \"id\": 3,\n        \"email\": \"user@example.com\",\n        \"role\": \"user\",\n        \"name\": \"First\",\n        \"lName\": \"Last\",\n        \"phone\": \"1234567890\"\n    },\n    \"msg\": \"User data retrieved successfully\"\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "update user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let body = {",
									"  \"name\": \"Josepim\",",
									"  \"lName\": \"Es la hostia\",",
									"  \"email\": \"toloco@email.com\",",
									"  \"phone\": \"6666666666\"",
									"};",
									"",
									"pm.collectionVariables.set('update_body', JSON.stringify(body));",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Data object should have the correct schema\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.data).to.be.an('object');",
									"  pm.expect(responseData.data).to.have.property('id').that.is.a('number');",
									"  pm.expect(responseData.data).to.have.property('email').that.is.a('string');",
									"  pm.expect(responseData.data).to.have.property('role').that.is.a('string');",
									"  pm.expect(responseData.data).to.have.property('name').that.is.a('string');",
									"  pm.expect(responseData.data).to.have.property('lName').that.is.a('string');",
									"  pm.expect(responseData.data).to.have.property('phone').that.is.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Ok true\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.ok).to.eql(true);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{update_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{userId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{userId}}"
							]
						},
						"description": "- **Description**: Update user information.\n    \n\n#### Example URL\n\n`GET http://127.0.0.1:8000/api/v1/user/300`\n\n- **Request Headers**:\n    \n    - `Content-Type: application/json`\n        \n- **Request Body**:\n    \n\n``` json\n{\n    \"name\": \"Updated Name\",\n    \"lName\": \"Updated Last\",\n    \"email\": \"updated@example.com\",\n    \"phone\": \"0987654321\"\n}\n\n ```\n\n- **Response**: JSON object with updated user data.\n    \n\n#### Example Response\n\n``` json\n{\n    \"ok\": true,\n    \"data\": {\n        \"id\": 4,\n        \"email\": \"updated@example.com\",\n        \"role\": \"user\",\n        \"name\": \"Updated Name\",\n        \"lName\": \"Updated Last\",\n        \"phone\": \"0987654321\"\n    },\n    \"msg\": \"Update successful\"\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "delete account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('ok true', function () {",
									"    pm.expect(pm.response.json().ok).to.eql(true);",
									"});",
									"",
									"pm.test('msg validation', function () {",
									"    pm.expect(pm.response.json().msg).to.eql(\"Account deleted\");",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Response includes the required fields\", function () {",
									"    const responseData = pm.response.json().data;",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
									"    pm.expect(responseData.email).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.role).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.name).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.lName).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.phone).to.exist.and.to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"// Store the id of the deleted user in an environment or global variable",
									"var deletedUserId = pm.response.json().data.id;",
									"pm.globals.set(\"deletedUserId\", deletedUserId);",
									"// Retrieve the saved \"deletedUserId\" value from the variable",
									"pm.test(\"Compare response against saved 'deletedUserId' value\", function() {",
									"    var savedDeletedUserId = pm.globals.get(\"deletedUserId\");",
									"    ",
									"    var responseBody = pm.response.json();",
									"    var responseDeletedUserId = responseBody.data.id;",
									"    ",
									"    pm.expect(responseDeletedUserId).to.equal(savedDeletedUserId);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{userId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{userId}}"
							]
						},
						"description": "### Delete User\n\n- **Description**: Delete a user by ID.\n    \n- **Response**: Returns data of the deleted user.\n    \n#### Example URL\n\n`GET http://127.0.0.1:8000/api/v1/user/300`\n\n#### Example Response\n\n``` json\n{\n    \"ok\": true,\n    \"data\": {\n        \"id\": 311,\n        \"email\": \"examplemail@mail.com\",\n        \"role\": \"user\",\n        \"name\": \"Josepingp\",\n        \"lName\": \"El guapeton\",\n        \"phone\": \"658780643\"\n    },\n    \"msg\": \"Account deleted\"\n}\n\n ```"
					},
					"response": []
				}
			],
			"description": "These services provide everything necessary for administering application users."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://127.0.0.1:8000/api/v1/user",
			"type": "string"
		},
		{
			"key": "sup_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "create_body",
			"value": ""
		},
		{
			"key": "userId",
			"value": ""
		},
		{
			"key": "update_body",
			"value": ""
		}
	]
}